* Tweaks
** Interface tweak
*** Inhibit the startup message and desibling the tool bar
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
   #+END_SRC

*** Elimin the noisy bell
    #+begin_src emacs-lisp
      ;; Don't let Emacs hurt your ears
      (setq visible-bell t)
    #+end_src
*** Changing the default font
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Fira Mono Medium-11")) 
      ;; (set-face-attribute 'default t :font "Fira Mono medium-11")
    #+END_SRC

*** Highlight the current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode -1)
   #+END_SRC

*** Highlighting the cursor when ever the windows scroll
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
        :ensure t
        :config
        (beacon-mode 1)
        (setq beacon-color "#15A613")
        (diminish 'beacon-mode)
        )
    #+END_SRC

*** Parens mode
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode t)
      (setq show-paren-style 'expression)
    #+END_SRC

*** Line Spacing
    #+BEGIN_SRC emacs-lisp
      ;; (customize-set-variable 'line-spacing 0.4)
    #+END_SRC
*** Display time
    - display the time and optionally mail flag in the mode line
      #+BEGIN_SRC emacs-lisp
        (display-time-mode)
      #+END_SRC
** Buffers
*** Reverting the buffer
    - this revert the buffer automatically
    #+BEGIN_SRC emacs-lisp
       (global-auto-revert-mode t)
    #+END_SRC
* Installing the witch key package
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config (which-key-mode)
        )
    #+END_SRC
* Installing the try package
  # Brings up some help
    #+BEGIN_SRC emacs-lisp
      (use-package try
      :ensure t)
    #+END_SRC
* Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :config
        (yas-reload-all)
        )
    #+END_SRC
* Ido mode
    #+BEGIN_SRC emacs-lisp
      (use-package ido
        :ensure t
        :init
        (global-set-key (kbd "C-c s") 'ido-for-this-mode)
        (global-set-key (kbd "C-c r b") 'ido-bookmark-jump)
        :config
        (ido-mode t)
        (setq ido-enable-flex-matching t)
        (setq ido-use-virtual-buffers t)
        (ido-everywhere)
        ;; Limit ido search for the current mode
        (defun ido-for-this-mode ()
        (interactive)
        (let ((the-mode major-mode))
          (switch-to-buffer
           (ido-completing-read
            (format "Buffers of %s: " the-mode)
            (save-excursion
              (delq
               nil
               (mapcar (lambda (buf)
                         (when
                             (buffer-live-p buf)
                           (with-current-buffer buf (and (eq major-mode the-mode)
                                                         (buffer-name buf)))))
                       (buffer-list))))))))
        ;; using ido with bookmarks
        (defun ido-bookmark-jump (bname)
          "*Switch to bookmark interactively using `ido'."
          (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
          (bookmark-jump bname))
        )
    #+END_SRC

* Smex mode
  #+BEGIN_SRC emacs-lisp
    (use-package smex
      :ensure t
      :init
      (smex-initialize)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
      (global-set-key (kbd "C-c C-c x") 'execute-extended-command)
      :config
      (setq smex-save-file "~/.emacs.d/smex-items"))
  #+END_SRC
* Ice widow mode
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :bind
      ("C-x o" . ace-window)
      :init
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-scope 'frame)
      (setq aw-dispatch-always nil)
      )
  #+END_SRC

* Ice jump mode
  #+BEGIN_SRC emacs-lisp
    (use-package ace-jump-mode
      
      :ensure t
      :bind (("C-." . ace-jump-word-mode)
             ("C-!" . ace-jump-char-mode) )
      )
  #+END_SRC

* installing auto complete package
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn (ac-config-default) (global-auto-complete-mode t) ) )
#+END_SRC

* Setting Org Mode
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (setq org-special-ctrl-a/e t) ;C-a and C-e will ignore TODO kwords and ellipsises
  (setq org-special-ctrl-k t)
  (setq org-ctrl-k-protect-subtree t) ;this doesn't work! I don't know why?
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
#+END_SRC

* Installing flycheck
  #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode t))
  #+END_SRC

* Installing and loading themes
** misterioso
   #+begin_src emacs-lisp :tangle yes
     ;; (load-theme 'misterioso t )
   #+end_src
** tsdh-dark theme
   #+BEGIN_SRC emacs-lisp
     ;; (load-theme 'tsdh-dark t)
   #+END_SRC
** Dracula
   #+BEGIN_SRC emacs-lisp
     (use-package dracula-theme
       :ensure t
       :disabled
       :config
       (load-theme 'dracula t) )
   #+END_SRC
** zenburn
   #+BEGIN_SRC emacs-lisp
     ; (use-package zenburn-theme 
     ;    :ensure t 
     ;    :disabled
     ;    :config
     ;    (load-theme 'zenburn t)
     ;    )
   #+END_SRC
** Leuven
   #+BEGIN_SRC emacs-lisp
     (use-package leuven-theme
       :ensure
       :config
       :disabled
       (load-theme 'leuven t)
       (setq org-src-fontify-natively t) ;; Fontify the whole line for headings
       (with a background color)  ;; (setq org-fontify-whole-heading-line t)
       )
   #+END_SRC
   
** Moe theme
   #+BEGIN_SRC emacs-lisp
     (use-package moe-theme
       :ensure t
       :config
       (setq moe-theme-highlight-buffer-id t)
       (setq moe-theme-resize-org-title '(2.2 1.8 1.6 1.4 1.2 1.0 1.0 1.0 1.0))
       (setq meo-theme-resize-markdown-title '(2.0 1.7 1.5 1.3 1.0 1.0))
       (moe-theme-set-color 'blue)
       (require 'moe-theme-switcher)
       )
   #+END_SRC
* Systemd
  #+BEGIN_SRC emacs-lisp
    (use-package systemd
      :ensure t)
  #+END_SRC

* Transmission torrent client
  - Intreface for the transmission daemon
  #+BEGIN_SRC emacs-lisp
    (use-package transmission
      :ensure t)
  #+END_SRC
* Elfeed
  - the RSS reader
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed
        :ensure t
        :config
        (setq elfeed-feeds '(
                             ("https://www.archlinux.org/feeds/packages/x86_64/" ArchLinux)
                             ("http://planet.emacsen.org/atom.xml" Emacs))))
    #+END_SRC
* Installing Aur package
  #+BEGIN_SRC emacs-lisp
    (use-package aurel
      :ensure t
      )
  #+END_SRC
* Reading bugs in emacs
  #+BEGIN_SRC emacs-lisp
    (use-package debbugs
      :ensure t)
  #+END_SRC

* Costomization of Programming languages modes
** Lisp
*** Rainbow delemeters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'eval-expression-minibuffer-setup-hook #'rainbow-delimiters-mode)
       (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'lisp-interaction-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'scheme-mode-hook #'rainbow-delimiters-mode)
       )
   #+END_SRC

*** Paredit
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :ensure t
        :init
        (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
        (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
        (add-hook 'ielm-mode-hook #'enable-paredit-mode)
        (add-hook 'lisp-mode-hook #'enable-paredit-mode)
        (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
        (add-hook 'scheme-mode-hook #'enable-paredit-mode)
        )
    #+END_SRC
 
** Python
*** installing python-environment
    #+BEGIN_SRC emacs-lisp
      (use-package python-environment
       	:ensure t
       	)
    #+END_SRC

*** Installing jedi
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
       (add-hook 'python-mode-hook 'jedi:setup) )
   #+END_SRC

*** Python set up
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook #'yas-minor-mode)
      (add-hook 'python-mode-hook 'linum-mode)
    #+END_SRC

** Perl
   #+BEGIN_SRC emacs-lisp
     (add-hook 'cperl-mode-hook #'linum-mode)
     (add-hook 'cperl-mode-hook #'yas-minor-mode)

     (set-variable 'cperl-autoindent-on-semi t)
     (setq cperl-indent-level 4)
     (setq cperl-indent-parens-as-block t)
     (setq cperl-close-paren-offset -4)
     (setq cperl-indent-subs-specially nil)

     (setq cperl-electric-parens t)
     (setq cperl-electric-keyword t)

     ;; perl mode (add-hook 'perl-mode-hook #'linum-mode)
     (setq perl-indent-level 4)
     (add-hook 'perl-mode-hook #'yas-minor-mode)
     (add-hook 'perl-mode-hook #'electric-pair-mode)
   #+END_SRC

** Golang
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :ensure t
       :config
       (require 'go-mode) )
   #+END_SRC
** Dart mode
   #+BEGIN_SRC emacs-lisp
     (use-package dart-mode
       :ensure t
       :init
       (add-hook 'dart-mode-hook #'linum-mode) )
   #+END_SRC
** CSV mode
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :ensure t
       )
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode
       (("README\\.md\\'" . gfm-mode)
        ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :config
       (add-hook 'markdown-mode-hook #'yas-minor-mode))
   #+END_SRC
** SLQ
   #+BEGIN_SRC emacs-lisp
     (add-hook 'sql-mode-hook #'yas-minor-mode)
     (add-hook 'sql-mode-hook 'linum-mode)
   #+END_SRC
** Web mode Conf
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :init
       (setq web-mode-enable-auto-pairing t)
       :config
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
       (setq web-mode-ac-sources-alist '(("css" . (ac-source-css-property))
                                         ("html". (ac-source-words-in-buffer ac-source-abbrev))))
       (setq web-mode-enable-auto-quoting t)
       (setq web-mode-enable-current-element-highlight t)
       (setq web-mode-enable-current-column-highlight t)
       )
   #+END_SRC

